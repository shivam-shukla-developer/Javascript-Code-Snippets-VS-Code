{
    "named function": {
      "prefix": "nfn",
      "body": ["function ${1:functionName}($2){", "  $3", "}"],
      "description": "Named Function"
    },
    "anonymous function": {
      "prefix": "fn",
      "body": ["function($1){", "  $2", "}"],
      "description": "Anonymous function"
    },
    "arrow function": {
      "prefix": "afn",
      "body": ["const ${1:functionName} = ($2) => {", "  $3", "}"],
      "description": "Arrow function"
    },
    "Function Apply": {
      "prefix": "apply",
      "body": ["${1:functionName}.apply(${2:this}, ${3:arguments})"],
      "description": "Function Apply"
    },
    "Function Call": {
      "prefix": "call",
      "body": ["${1:fn}.call(${2:this}, ${3:arguments})"],
      "description": "Function Call"
    },
    "Function Bind": {
      "prefix": "bind",
      "body": ["${1:fn}.bind(${2:this}, ${3:arguments})"],
      "description": "Function Bind"
    },
    "IIFE": {
      "prefix": "iife",
      "body": ["(function ($1) {", "    $2", "})();"],
      "description": "IIFE"
    },
    "IIFE with result": {
      "prefix": "iifer",
      "body": [
        "const ${1:result} = (function ($1) {",
        "    $2",
        "  return ;",
        "})();",
        "console.log(${1:result});"
      ],
      "description": "IIFE with result"
    },
    "new promise": {
      "prefix": "np",
      "body": [
        "new Promise((${1:resolve}, ${2:reject}) => {",
        " $3 ",
        "})",
        ".then(data => console.log(data))",
        ".catch(msg => console.error(msg));"
      ],
      "description": "Create a new Promise"
    },
    "new promise directly resolve": {
      "prefix": "npres",
      "body": [
        "Promise.resolve().then(data => console.log(data));"      
      ],
      "description": "Create a new promise and resolves it directly"
    },
    "new promise directly reject": {
      "prefix": "nprej",
      "body": [
        "Promise.reject().catch(msg => console.error(msg));"      
      ],
      "description": "Create a new promise and reject it directly"
    },
    "Array Method": {
      "prefix": "arrmth",
      "body": [
        "${1:iterable}.${2|forEach,map,filter,find,every,some|}((${3:item}) => {",
        "  $4",
        "})"
      ],
      "description": "Array Method"
    },
    "Reduce": {
      "prefix": "reduce",
      "body": ["${1:iterable}.reduce((${2:acc}, ${3:item}) => {", "  ${5}", "}${4:, initial})", ""],
      "description": "Array Method Reduce"
    },
    "Basic If Statement": {
      "prefix": "i",
      "body": ["if(${1:condition}) {", "  $2", "}"],
      "description": "If Statement"
    },
    "If Else Statement": {
      "prefix": "ife",
      "body": ["if(${1:condition}) {", "  $2", "} else {", "  $3", "}"],
      "description": "If else statement"
    },
    "Else-If": {
      "prefix": "ei",
      "body": ["else if (${1:condition}) {", "  $2", "}"],
      "description": "Else-If Statement"
    },
    "switch statment": {
      "prefix": "swt",
      "body": [
        "switch(${1:expression}){",
        "  case ${2:condition}: $3",
        "                       break;",
        "  case ${4:condition}: $5",
        "                       break;",
        "  case ${6:condition}: $7",
        "                       break;",
        "  default: $8;",
        "}"
      ],
      "description": "Switch Statment"
    },
    "For In Loop": {
      "prefix": "fin",
      "body": ["for (const ${1:key} in ${2:source}) {", "  $3", "}"],
      "description": "For In Loop"
    },
    "For Of Loop": {
      "prefix": "fof",
      "body": ["for (const ${1:key} of ${2:source}) {", "  $3", "}"],
      "description": "For Of Loop"
    },
    "While Loop": {
      "prefix": "wl",
      "body": ["while (${1:condition}) {", "  $2", "}"],
      "description": "While Loop"
    },
    "fetch with catch": {
      "prefix": "fetchc",
      "body": [
        "fetch('${1:url}')",
        "  .then(response => {",
        "    if (response.status === 200) {",
        "      return response.json();",
        "    } else {",
        "      throw new Error('Something went wrong on api server!');",
        "    }",
        "  })",
        "  .then(data => {",
        "    console.debug(data);",
        "  }).catch(error => {",
        "    console.error(error);",
        "  });"
      ],
      "description": "Fetch with Catch"
    },
    "Fetch Request": {
      "prefix": "fetch",
      "body": [
        "fetch('${1:url}')",
        "  .then(res => res.json())",
        "  .then(data => console.log(data));"
      ],
      "description": "Fetch Request"
    },
    "Async/Await Fetch": {
      "prefix": "asyncfetch",
      "body": [
        "const request = async ($1) => {",
        "    const response = await fetch('${2:url}');",
        "    const data = await response.json();",
        "    console.log(data);",
        "}"
      ],
      "description": "Fetch Async/Await"
    },
    "Async/Await Fetch with catch": {
      "prefix": "asyncfetchc",
      "body": [
        "const request = async ($1) => {",
        "  const response = await fetch('${2:url}');",
        "  if(response.status === 200){",
        "    const data = await response.json();",
        "    console.log(data);",
        "  }",
        "  else{",
        "    console.log(\"error\");",
        "  }",
        "}"
      ],
      "description": "Async/Await Fetch with catch"
    },
    "try and catch": {
      "prefix": "tc",
      "body": ["try {", "  $1", "}catch (err){", "  $2", "}"],
      "description": "try and catch"
    },
    "try, catch and finally": {
      "prefix": "tcf",
      "body": ["try {", "  $1", "}catch (err){", "  $2", "}", "finally{", "  $3", "}"],
      "description": "try, catch and finally"
    },
    "Axios Request": {
      "prefix": "ax",
      "body": [
        "axios.${1|get,post,put,delete|}('${2:url}')",
        "  .then(res => console.log(res.data))",
        "  .catch(err => console.log(err));"
      ],
      "description": "Axios Request"
    },
    "Async/Await Axios": {
      "prefix": "asyncax",
      "body": [
        "async function ${1:functionName}() {",
        "  try {",
        "    const response = await axios.${2|get,post,put,delete|}('${3:url}');",
        "    const data = await response.json();",
        "    return data;",
        "  } catch (error) {",
        "    console.log(error);",
        "  }",
        "}"
      ],
      "description": "Async/Await Axios"
    },
    "Set TimeOut": {
      "prefix": "st",
      "body": ["setTimeout(() => {", "  $2", "}, ${1:delay})"],
      "description": "Set TimeOut"
    },
    "Set Interval": {
      "prefix": "si",
      "body": ["setInterval(() => {\n\t$2\n}, ${1:intervalInms});"],
      "description": "Set Interval"
    },
    "Set Immediate": {
      "prefix": "sim",
      "body": ["setImmediate(() => {", "  $1", "})"],
      "description": "Set Immediate"
    },
    "Set Timeout with variable": {
      "prefix": "stv",
      "body": [
        "const ${1:timer} = setTimeout(() => {",
        "                    $3",
        "                   }, ${2:delay})"
      ],
      "description": "Set Timeout with variable"
    },
    "Clear Timeout": {
      "prefix": "ct",
      "body": ["clearTimeout(${1:variableName});"],
      "description": "Clear Timeout"
    },
    "Set Interval with variable": {
      "prefix": "siv",
      "body": [
        "const ${1:variableName} = setInterval(() => {",
        "                            $3",
        "                          },${2:intervalTime})"
      ],
      "description": "Set Interval with variable"
    },
    "Clear Interval": {
      "prefix": "ci",
      "body": ["clearInterval(${1:variableName})"],
      "description": "Clear Interval"
    },
    "Array Destructure": {
      "prefix": "ad",
      "body": ["const [${1:element1}, ${2:element2}] = ${3:array}"],
      "description": "Array Destructure"
    },
    "Object Destructure": {
      "prefix": "od",
      "body": ["const {${1:property1}, ${1:property2}} = ${3:object}"],
      "description": "Object Destructure"
    },
    "export ": {
      "prefix": "e",
      "body": ["export ${1:member}"],
      "description": "export $1"
    },
    "export default": {
      "prefix": "ed",
      "body": ["export default ${1:member}"],
      "description": "export default"
    },
    "export default fn": {
      "prefix": "edf",
      "body": ["export default function ${1:functionName} (${2:arguments}) {\n\t$3\n}"],
      "description": "export default fn"
    },
    "export const": {
      "prefix": "ec",
      "body": ["export const ${1:member} = ${2:value}"],
      "description": "export const"
    },
    "import": {
      "prefix": "im",
      "body": ["import ${1:*} from '${2:module}'"],
      "description": "import"
    },
    "import as": {
      "prefix": "ima",
      "body": ["import ${1:*} as ${2:name} from '${3:module}'"],
      "description": "import as"
    },
    "import with destructure": {
      "prefix": "imd",
      "body": ["import { $1 } from '${2:module}'"],
      "description": "import with destructure"
    },
    "require": {
      "prefix": "rq",
      "body": ["const ${1:module} = require(${1:module});"],
      "description": "require"
    },
    "module export": {
      "prefix": "me",
      "body": ["module.exports = {};"],
      "description": "module export"
    },
    "class": {
      "prefix": "cls",
      "body": ["class ${1:name} {", "  constructor(${2:arguments}) {", "    $3", "  }", "}"],
      "description": "class"
    },
    "class with extends": {
      "prefix": "clsx",
      "body": [
        "class ${1:name} extends ${2:base} {",
        "  constructor(${3:arguments}) {",
        "    super(${3:arguments});",
        "  }",
        "}"
      ],
      "description": "class with extends"
    },
    "console log": {
      "prefix": "clog",
      "body": ["console.log(${1:obj});"],
      "description": "Display the logging information"
    },
    "console log key-value pair": {
      "prefix": "cl",
      "body": ["console.log('${1:obj}:',${2:obj});"],
      "description": "Display the logging information in key value pair"
    },
    "console clear": {
      "prefix": "cclr",
      "body": ["console.clear();"],
      "description": "Clear the console"
    },
    "console warn": {
      "prefix": "cw",
      "body": ["console.warn(${1:obj});"],
      "description": "Outputs a warning message"
    },
    "console table": {
      "prefix": "ctb",
      "body": ["console.table(${1:obj});"],
      "description": "Displays tabular data as a table"
    },
    "console assert": {
      "prefix": "cass",
      "body": ["console.assert(${1:expression}, ${2:obj});"],
      "description": "Writes an error message to the console if the expression is false"
    },
    "console count": {
      "prefix": "cc",
      "body": ["console.count(${1:label});"],
      "description": "Keep count of how many times your code is read "
    },
    "console countReset": {
      "prefix": "ccr",
      "body": ["console.countReset(${1:label});"],
      "description": "Resets the counter"
    },
    "console dir": {
      "prefix": "cdir",
      "body": ["console.dir(${1:obj}, {colors: ${2:true}, depth: ${3:null}});"],
      "description": "Display all the properties of an object"
    },
    "console error": {
      "prefix": "cerr",
      "body": ["console.error(${1:obj});"],
      "description": "Outputs an error message"
    },
    "console group": {
      "prefix": "cgrp",
      "body": ["console.group(${1:label});"],
      "description": "Creates a new inline group in the Web Console"
    },
    "console groupEnd": {
      "prefix": "cend",
      "body": ["console.groupEnd();"],
      "description": "Exits the current inline group in the Web Console"
    },
    "console info": {
      "prefix": "cin",
      "body": ["console.info(${1:obj})"],
      "description": "Outputs an informational message with a icon"
    },
    "console time": {
      "prefix": "ctym",
      "body": ["console.time(${1:label});"],
      "description": "Starts a timer you can use to track how long an operation takes"
    },
    "console timeEnd": {
      "prefix": "cte",
      "body": ["console.timeEnd(${1:label});"],
      "description": "Stops a timer that was previously started"
    },
    "console timeLog": {
      "prefix": "ctg",
      "body": ["console.timeLog(${1:label});"],
      "description": "Logs the current value of a timer that was previously started"
    },
    "console trace": {
      "prefix": "ctr",
      "body": ["console.trace(${1:label});"],
      "description": "Display the trace which represents how the code ended up at a certain point"
    }
  }